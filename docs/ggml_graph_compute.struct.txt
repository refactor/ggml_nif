@startuml
package data <<Database>> {
struct tensor <<ggml>> {
  -n_tasks: int
}

struct compute_graph <<ggml>> {
  +work:tensor
}
tensor <--* "*" compute_graph : nodes
}

package compute {
struct state_shared <<ggml>> {
  #spin: ggml_lock_t
  ~n_threads: int
  .. atomic ..
  -n_ready: int
  -has_work: bool
  -stop: bool
}

struct state <<(T,#ff7700)worker>> {
  -thrd: ggml_thread_t
}
state_shared "1" <-* "0..*" state : shared <

struct params <<(T,#ff7700)ggml_compute>> {
  type: ggml_task_type
  .. thread info ..
  ith: int
  nth: int
  .. for all thread ..
  wsize: size_t
  wdata: void*
}
note left of params::"ith: int"
thread info for data partition
end note
note left of params::"wdata: void*"
work buffer for all thread
end note

state *--> params: params
}

compute.state  *-> data.tensor: node

tensor::n_tasks <- state_shared::n_threads #blue;line.dotted;text:blue : maybe from

data.compute_graph::work -> compute.params::wdata #blue;line.dotted

interface compute_forward
interface compute_forward_add
interface compute_forward_abs
interface compute_forward_mul
interface compute_forward_mul_mat
compute_forward <|-- compute_forward_add
compute_forward <|-- compute_forward_abs
compute_forward <|-- compute_forward_mul
compute_forward <|-- compute_forward_mul_mat

compute.params <..o "param" compute_forward
data.tensor <..o "node" compute_forward
@enduml


